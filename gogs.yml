---
- name: Load gogs manifest
  k8s:
    state: present
    src: "{{ playbook_dir }}/files/manifests/{{ item }}.yml"
    wait: yes
    wait_condition:
      reason: completed
      status: "True"
  with_items:
    - gogsManifest

- name: Set gogs status
  set_fact:
    gogsManifestStatus: "loadedManifest"

- name: Get SSL certificate
  block:
    - name: Get POD information for DAP instances
      k8s_facts:
        kind: pod
        namespace: dap
        label_selectors:
          - role = source
      register: dappod
      until: dappod.resources[0].status.containerStatuses[0].ready == true
      retries: 60
      delay: 2

    - name: Configure Variable with pod name
      set_fact:
        sourcePodName: "{{ dappod.resources[0].metadata.name }}"

    - name: Get SSL cert
      shell: |
        kubectl exec -n dap {{ sourcePodName }} -i -- cat /opt/conjur/etc/ssl/{{dapSourceService}}.pem 
      register: ssl

    - name: save SSL cert
      local_action: copy content={{ ssl.stdout}} dest={{ playbook_dir }}/files/ssl.pem

    - name: replace seed file config map
      shell: |
        kubectl -n {{ item }} create configmap k8s-app-ssl --from-file=ssl-certificate={{ playbook_dir }}/files/ssl.pem -o yaml --dry-run | kubectl replace -f -
      with_items:
        - gogs

    - name: Delete ssl.pem file
      file:
        state: absent
        path: "{{ playbook_dir }}/files/ssl.pem"
  when: gogsManifestStatus == "loadedManifest"

- name: Check that gogs initial webpage is up.
  uri:
    url: "http://{{ gogsIngressRoute }}/install"
    body_format: json
    status_code: 200, 404
    return_content: yes
    validate_certs: NO
    method: GET
  register: gogs_setup
  until: gogs_setup.status == 200 or gogs_setup.status == 404
  retries: 60
  delay: 2

- name: Set status of gogs configuration
  set_fact:
    gogsConfigState: "unconfigured"
  when: gogs_setup.status == 200

- name: Set status of gogs configuration
  set_fact:
    gogsConfigState: "initialConfigured"
  when: gogs_setup.status == 404

- name: Check to see if Gogs has been sent it's initial information
  block:
    - name: Check that we can get a list of organizations.
      uri:
        url: "http://{{ gogsIngressRoute }}/api/v1/users/{{gogsOrg}}"
        body_format: json
        status_code: 200
        user: "{{ gogsAdmin }}"
        password: "{{ gogsAdminPass }}"
        return_content: yes
        validate_certs: NO
        method: GET
      register: gogs_setup
      until: gogs_setup.status == 200
      retries: 60
      delay: 2

    - name: Set status of gogs configuration
      set_fact:
        gogsConfigState: "configured"
      when: gogs_setup.content != "Gogs is a painless self-hosted Git service"
  when: gogsConfigState == "initialConfigured"


- name: gogs initial configuration
  block:
    - name: Send initial configuration information
      uri:
        url: "http://{{gogsIngressRoute}}/install"
        method: POST
        body_format: raw
        body: "db_type=SQLite3&db_path=data/gogs.db&app_name=Gogs&repo_root_path=/data/git/gogs-repositories&run_user=git&domain=gogs&ssh_port=22&http_port=3000&app_url=http://gogs.k8scluster.local/&log_root_path=/app/gogs/log&smtp_host=&smtp_from=&smtp_user=&smtp_passwd=&disable_gravatar=true&enable_captcha=false&register_confirm=false&admin_name={{gogsAdmin}}&admin_passwd={{gogsAdminPass}}&admin_confirm_passwd={{gogsAdminPass}}&admin_email=eva@cyberark.com"
        return_content: yes
        follow_redirects: all
        status_code: 200,302
      register: gogs_config

    - name: Allow other tasks to run
      set_fact:
        gogsConfigState: "initialConfigured"
  when: gogsConfigState == "unconfigured"

- name: Set up gogs components
  block:
    - name: Create gogs organization
      uri:
        url: "http://{{gogsIngressRoute}}/api/v1/admin/users/{{ gogsAdmin }}/orgs"
        method: POST
        body_format: json
        body: {
          "username": "{{ gogsOrg }}",
          "full_name": "Cyberark",
          "description": "Cyberark_Org.",
          "website": "https://www.cyberark.com",
          "location": "US"
          }
        user: "{{ gogsAdmin }}"
        password: "{{ gogsAdminPass }}"
        force_basic_auth: true
        status_code: [201, 422] # 422 status code is given when the org already exists

    - name: Create gogs teams
      uri:
        url: "http://{{gogsIngressRoute}}/api/v1/admin/orgs/{{ gogsOrg }}/teams"
        method: POST
        body_format: json
        body: {
          "name": "{{ item.name }}",
          "description": "{{ item.description }}",
          "permission": "{{ item.permission }}"
          }
        user: "{{ gogsAdmin }}"
        password: "{{ gogsAdminPass }}"
        return_content: yes
        force_basic_auth: true
        status_code: [201, 422] # 422 status code is given when the org already exists
      with_items:
        - { name: 'developers', description: 'Team to add developers for admin access to repositories', permission: 'admin' }
        - { name: 'api', description: 'Team to add devops tools for read access to repositories', permission: 'read' }

    - name: Create Tool Users
      uri:
        url: "http://{{gogsIngressRoute}}/api/v1/admin/users"
        method: POST
        body_format: json
        body: {
              login_name: "{{ item.login_name }}",
              username: "{{ item.login_name }}",
              email: "{{ item.email }}",
              password: "{{ gogsApiAccessPass }}"
    }
        user: "{{ gogsAdmin }}"
        password: "{{ gogsAdminPass }}"
        force_basic_auth: true
        status_code: [201, 422]
      with_items:
        - { login_name: "jenkins", email: "jenkins@cyberark.com"}
        - { login_name: "ansible", email: "ansible@cyberark.com"}

    - name: Create organization repo
      uri:
        url: "http://{{gogsIngressRoute}}/api/v1/admin/users/{{ gogsOrg }}/repos"
        method: POST
        body_format: json
        body: {
              name: "{{ item.name }}",
              description: "{{ item.description }}",
              private: true,
              auto_init: true,
              gitignores: "macOS",
              license: "MIT License",
              readme: "Default"
    }
        user: "{{ gogsAdmin }}"
        password: "{{ gogsAdminPass }}"
        force_basic_auth: true
        status_code: [201, 422] # 422 status code is given when the org already exists
      with_items:
        - { name: "Lab1-Summon", description: "This repo will use authn-k8s to pull back a secret."}
        - { name: "Lab2-RESTcall", description: "This repo will showcase a simple rest call to get a secret."}
        - { name: "Lab3-JenkinsPlugin", description: "This repo will make use of the Jenkins DAP plugin."}
        - { name: "DAP-Policy", description: "The repo is responsible for storing all of the policies for DAP."}

    - name: set status of gogs configuration
      set_fact:
        gogsConfigState: "configured"
  when: gogsConfigState == "initialConfigured"

# - debug:
#     var: item
#   loop: "{{ teams.json | json_query('[*].id') }}"

# - debug:
#     var: item
#   loop: "{{ repos.json | json_query('[*].name') }}"

# - debug:
#     var: item
#   loop: "{{ users.json | json_query('[*].name') }}"
