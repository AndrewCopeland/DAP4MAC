---
- name: Check that gogs initial webpage is up.
  uri:
    url: "http://{{ gogsIngressRoute }}/install"
    body_format: json
    status_code: 200, 404
    return_content: yes
    validate_certs: NO
    method: GET
  register: gogs_setup
  until: gogs_setup.status == 200 or gogs_setup.status == 404
  retries: 60
  delay: 2

- name: Set status of gogs configuration
  set_fact:
    gogsConfigState: "configured"
  when: gogs_setup.status == 404

- name: Set status of gogs configuration
  set_fact:
    gogsConfigState: "unconfigured"
  when: gogs_setup.status == 200

- name: gogs initial configuration
  block:
    - name: Send initial configuration information
      uri:
        url: "http://{{gogsIngressRoute}}/install"
        method: POST
        body_format: raw
        body: "db_type=SQLite3&db_path=data/gogs.db&app_name=Gogs&repo_root_path=/data/git/gogs-repositories&run_user=git&domain=gogs&ssh_port=22&http_port=3000&app_url=http://gogs.k8scluster.local/&log_root_path=/app/gogs/log&smtp_host=&smtp_from=&smtp_user=&smtp_passwd=&disable_gravatar=true&enable_captcha=false&register_confirm=false&admin_name={{gogsAdmin}}&admin_passwd={{gogsAdminPass}}&admin_confirm_passwd={{gogsAdminPass}}&admin_email=eva@cyberark.com"
        return_content: yes
        follow_redirects: all
        status_code: 200,302
      register: gogs_config

    - name: Allow other tasks to run
      set_fact:
        gogsConfigState: "configured"
  when: gogsConfigState == "unconfigured"

- name: Create gogs organization
  uri:
    url: "http://{{gogsIngressRoute}}/api/v1/admin/users/{{ gogsAdmin }}/orgs"
    method: POST
    body_format: json
    body: {
      "username": "{{ gogsOrg }}",
      "full_name": "Cyberark",
      "description": "Cyberark_Org.",
      "website": "https://www.cyberark.com",
      "location": "US"
      }
    user: "{{ gogsAdmin }}"
    password: "{{ gogsAdminPass }}"
    force_basic_auth: true
    status_code: [201, 422] # 422 status code is given when the org already exists
  when: gogsConfigState == "configured"

- name: Create gogs teams
  uri:
    url: "http://{{gogsIngressRoute}}/api/v1/admin/orgs/{{ gogsOrg }}/teams"
    method: POST
    body_format: json
    body: {
      "name": "{{ item.name }}",
      "description": "{{ item.description }}",
      "permission": "{{ item.permission }}"
      }
    user: "{{ gogsAdmin }}"
    password: "{{ gogsAdminPass }}"
    force_basic_auth: true
    status_code: [201, 422] # 422 status code is given when the org already exists
  when: gogsConfigState == "configured"
  register: "{{item.name}}Status"
  with_items:
    - { name: 'developers', description: 'Team to add developers for admin access to repositories', permission: 'admin' }
    - { name: 'api', description: 'Team to add devops tools for read access to repositories', permission: 'read' }

- name: Create organization repo
  uri:
    url: "http://{{gogsIngressRoute}}/api/v1/admin/users/{{ gogsOrg }}/repos"
    method: POST
    body_format: json
    body: {
          name: "{{ item.name }}",
          description: "{{ item.description }}",
          private: true,
          auto_init: true,
          gitignores: "macOS",
          license: "MIT License",
          readme: "Default"
}
    user: "{{ gogsAdmin }}"
    password: "{{ gogsAdminPass }}"
    force_basic_auth: true
    status_code: [201, 422] # 422 status code is given when the org already exists
  when: gogsConfigState == "configured"
  with_items:
    - { name: "Lab1-Summon", description: "This repo will use authn-k8s to pull back a secret."}
    - { name: "Lab2-RESTcall", description: "This repo will showcase a simple rest call to get a secret."}
    - { name: "Lab3-JenkinsPlugin", description: "This repo will make use of the Jenkins DAP plugin."}
    - { name: "DAP-Policy", description: "The repo is responsible for storing all of the policies for DAP."}

- name: Get list of gogs teams
  uri:
    url: "http://{{gogsIngressRoute}}/api/v1/orgs/{{ gogsOrg }}/teams"
    method: GET
    user: "{{ gogsAdmin }}"
    password: "{{ gogsAdminPass }}"
    force_basic_auth: true
    status_code: [200]
  register: teams
  when: gogsConfigState == "configured"

- name: Get list of repos
  uri: 
    url: "http://{{gogsIngressRoute}}/api/v1/user/repos"
    method: GET
    user: "{{ gogsAdmin }}"
    password: "{{ gogsAdminPass }}"
    force_basic_auth: true
    status_code: [200]
  regsiter: repos
  when: gogsConfigState == "configured"

- debug:
    var: item
  loop: "{{ teams.json | json_query('[*].id') }}"

- debug:
    var: item
  loop: "{{ repos.json | json_query('[*].name') }}"

- name: Block to add repos to the teams
  block:
    - name: Add repos to team
      uri: 
        url: "http://{{gogsIngressRoute}}/api/v1//admin/teams/{{ teamsID }}/repos/{{ reposName }}"
        method: PUT
        user: "{{ gogsAdmin }}"
        password: "{{ gogsAdminPass }}"
        force_basic_auth: true
        status_code: [204]
      loop: "{{ repos.json | json_query('[*].name') }}"
      loop_control:
        loop_var: reposName
  loop: "{{ teams.json | json_query('[*].id') }}"
  loop_control:
    loop_var: teamsID
  when: gogsConfigState == "configured"