---
- name: Check if Jenkins is already running
  uri:
    url: "https://{{jenkinsIngressRoute}}"
    return_content: yes
    body_format: json
    validate_certs: no
    method: GET
    status_code: 200, 404
  register: jenkinsWeb

- name: Set jenkins status
  set_fact:
    jenkinsStatus: "configured"
  when: jenkinsWeb.status == 200

- name: Set jenkins status
  set_fact:
    jenkinsStatus: "unconfigured"
  when: jenkinsWeb.status == 404

- name: Check to see if config map already exists
  k8s_facts:
    kind: ConfigMap
    namespace: jenkins
    name: k8s-app-ssl
  register: jenkinsConfigMap
  ignore_errors: yes

- name: Set status of configmap
  set_fact:
    sslConfigMap: "configured"
  when: jenkinsConfigMap.resources[0] is defined

- name: Set status of configmap
  set_fact:
    sslConfigMap: "unconfigured"
  when: jenkinsConfigMap.resources[0] is undefined

- name: create configmap
  block:
    - name: Create jenkins namespace
      k8s:
        name: jenkins
        api_version: v1
        kind: Namespace
        state: present
        wait: yes
        wait_condition:
          reason: completed
          status: "True"
          
    - name: Get POD information for DAP instances
      k8s_facts:
        kind: pod
        namespace: dap
        label_selectors:
          - role = source
      register: dappod
      until: dappod.resources[0].status.containerStatuses[0].ready == true
      retries: 60
      delay: 2

    - name: Configure Variable with pod name
      set_fact:
        sourcePodName: "{{ dappod.resources[0].metadata.name }}"

    - name: Get SSL cert
      shell: |
        kubectl exec -n dap {{ sourcePodName }} -i -- cat /opt/conjur/etc/ssl/{{dapSourceService}}.pem 
      register: ssl

    - name: save SSL cert
      local_action: copy content={{ ssl.stdout}} dest={{ playbook_dir }}/files/ssl.pem

    - name: replace SSL cert config map
      shell: |
        kubectl -n {{ item }} create configmap k8s-app-ssl --from-file=ssl-certificate={{ playbook_dir }}/files/ssl.pem
      with_items:
        - jenkins

    - name: Delete ssl.pem file
      file:
        state: absent
        path: "{{ playbook_dir }}/files/ssl.pem"

    - name: Set status of configmap
      set_fact:
        sslConfigMap: "configured"
  when: sslConfigMap == "unconfigured"

- name: Set up jenkins
  block:
    - name: Load Jenkins manifest
      k8s:
        state: present
        src: "{{ playbook_dir }}/files/manifests/{{ item }}.yml"
        wait: yes
        wait_condition:
          reason: completed
          status: "True"
      with_items:
        - jenkinsManifest

    - name: Set jenkins status
      set_fact:
        jenkinsStatus: "initialConfigured"
  when: jenkinsStatus == "unconfigured" and sslConfigMap == "configured"
