---
- hosts: demo_machine
  pre_tasks:
    - name: Verify Ansible is greater than 2.8
      assert:
        that: "ansible_version.full is version_compare('2.8', '>=')"
        msg: >
          " You must update Ansible to at least 2.8."

    - name: Check for websites
      uri:
        url: "{{ item.url }}"
        body_format: json
        status_code: 200
        return_content: yes
        validate_certs: NO
        method: GET
      register: result
      until: result.status == 200
      retries: 5
      delay: 2
      with_items:
      - { url: 'https://hub.docker.com' }
      - { url: 'https://github.com' }

    - name: install PIP modules
      pip:
        name:
          - pyYAML
          - kubernetes
          - openshift
        extra_args: --user

    - name: Check if Kubectl is installed in current shell
      shell: |
        which kubectl
      register: kubectl_is_installed
      
    - name: Fail if kubectl not installed
      assert:
        that: "kubectl_is_installed.stdout != ''"
        fail_msg: "kubectl is not found in the current shell. Please install kubectl and connect it to your target cluster."
        success_msg: "kubectl found. Located at {{ kubectl_is_installed.stdout }}"
 
  vars_prompt:
  - name: "mode"
    prompt: 'Do you want to stand up a new environment or delete an existing environment? ("new" or "delete")'
    default: "new"
    private: no
  
  - name: "clusterFQDN"
    prompt: 'Enter k8s cluster FQDN'
    default: "k8scluster.local"
    private: no
  
  tasks:
    - name: Check host entries for webpages
      lineinfile:
        path: /etc/hosts
        line: 127.0.0.1 {{ hostsDNS }}
        state: present
      check_mode: yes
      register: hostsChecks
      with_items:
       - "{{ ingressRoutes }}"
      loop_control:
        loop_var: hostsDNS

    - name: Ask user for password to add hosts
      pause:
        prompt: "Enter SUDO password"
        echo: no
      register: sudo
      when: hostsChecks.changed == true and ansible_become_pass is undefined and mode == 'new'
      no_log: yes

    - name: Set ansible become password
      set_fact:
        ansible_become_pass: "{{ sudo.user_input }}"
      no_log: yes
      when: hostsChecks.changed == true and mode == 'new'

    - name: Add host entries for webpages
      lineinfile:
        path: /etc/hosts
        line: 127.0.0.1 {{ item }}
        state: present
      with_items:
       - "{{ ingressRoutes }}"
      when: mode == 'new' and hostsChecks.changed == true
      become: yes
    
  
    - name: Load cluster tools and set demostage status
      block:
        - name: Load Cluster tools manifests
          k8s:
            state: present
            src: "{{ playbook_dir }}/files/manifests/{{ item }}.yml"
            wait: yes
            wait_condition:
              reason: completed
              status: "True"
          register: demoStage
          with_items:
            - dashboardManifest
            - nginxingressManifest
            - dashboardIngressManifest
            - weaveManifest
            - weaveIngressManifest

        - name: Set demo status
          set_fact:
            demoStage: "toolsLoaded"
      when: mode == 'new'

    - name: Configure DAP source and access. Set demo status
      block:
        - name: Configure DAP
          include_tasks: "{{ item }}.yml"
          with_items:
            - source
            - access
        - name: Set demo stage status
          set_fact:
            demoStage: "dapConfigured"
      when: demoStage == "toolsLoaded"
   
    - name: Remove Cluster Items
      k8s:
        state: absent
        src: "{{ playbook_dir }}/files/manifests/{{ item }}.yml"
        wait: yes
        wait_condition:
          reason: completed
          status: "True"
      with_items:
        - dashboardManifest
        - nginxingressManifest
        - dashboardIngressManifest
        - weaveManifest
        - weaveIngressManifest
        - dapSourceManifest
        - dapAccessManifest
        - gogsManifest
        - jenkinsManifest
      when: mode == 'delete'

    - name: Ask user for password for removal of hosts
      pause:
        prompt: "Enter SUDO password"
        echo: no
      register: sudo
      when: hostsChecks.changed == false and ansible_become_pass is undefined and mode == 'delete'
      no_log: yes

    - name: Set ansible become password for removal of hosts
      set_fact:
        ansible_become_pass: "{{ sudo.user_input }}"
      no_log: yes
      when: hostsChecks.changed == false and mode == "delete"

    - name: Remove host entries for webpages
      lineinfile:
        path: /etc/hosts
        line: 127.0.0.1 {{ item }}
        state: absent
      with_items:
       - "{{ ingressRoutes }}"
      when: mode == 'delete'
      become: yes
  
  vars:
    # ansible_python_interpreter: '{{ ansible_playbook_python }}'
    adminPass: 'Cyberark1'
    account: 'cyberark'
    dapAdmin: 'admin'
    dapAdminPass: "{{adminPass}}"
    dapAccount: "{{ account }}"
    dapSourceService: 'source.dap.svc.cluster.local'
    dapAccessService: 'access.dap.svc.cluster.local'
    dapFollowerReplicaCount: 1
    dapMasterContainerName: 'node'
    dapIngressRoute: "dap.{{clusterFQDN}}"
    jenkinsIngressRoute: "jenkins.{{clusterFQDN}}"
    dashboardIngressRoute: "dashboard.{{clusterFQDN}}"
    weaveIngressRoute: "weave.{{clusterFQDN}}"
    gogsIngressRoute: "gogs.{{clusterFQDN}}"
    demoMachineAddress: "{{ ansible_default_ipv4.address }}"
    appNamespaces:
      - jenkins
      - gogs
    ingressRoutes:
      - "{{dapIngressRoute}}"
      - "{{jenkinsIngressRoute}}"
      - "{{dashboardIngressRoute}}"
      - "{{weaveIngressRoute}}"
      - "{{gogsIngressRoute}}"
    gogsAdmin: 'eva'
    gogsAdminPass: "{{adminPass}}"
    gogsOrg: "{{ account }}"
    gogsApiAccessPass: "{{ gogsAdminPass }}"
