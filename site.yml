---
- hosts: demo_machine
  pre_tasks:
    - name: Verify Ansible is greater than 2.8
      assert:
        that: "ansible_version.full is version_compare('2.8', '>=')"
        msg: >
          " You must update Ansible to at least 2.8."

    - name: Check for websites
      uri:
        url: "{{ item.url }}"
        body_format: json
        status_code: 200
        return_content: yes
        validate_certs: NO
        method: GET
      register: result
      until: result.status == 200
      retries: 5
      delay: 2
      loop:
      - { url: 'https://hub.docker.com' }
      - { url: 'https://github.com' }

    - name: install PIP modules
      pip:
        name:
          - pyYAML
          - kubernetes
          - openshift
        extra_args: --user

    - name: Check if Kubectl is installed in current shell
      shell: |
        which kubectl
      register: kubectl_is_installed
      
    - name: Fail if kubectl not installed
      assert:
        that: "kubectl_is_installed.stdout != ''"
        fail_msg: "kubectl is not found in the current shell. Please install kubectl and connect it to your target cluster."
        success_msg: "kubectl found. Located at {{ kubectl_is_installed.stdout }}"
 
  vars_prompt:
  - name: "mode"
    prompt: 'Do you want to stand up a new environment or delete an existing environment? ("new" or "delete")'
    default: "new"
    private: no

  - name: "ingressEnable"
    prompt: 'Should cluster ingress be enabled for all apps?'
    default: "yes"
    private: no
  
  - name: "clusterFQDN"
    prompt: 'Enter k8s cluster FQDN'
    default: "k8scluster.local"
    private: no
  
  tasks:
    - name: Check host entries for webpages
      lineinfile:
        path: /etc/hosts
        line: 127.0.0.1 {{ hostsDNS }}
        state: present
      check_mode: yes
      register: hostsChecks
      with_items:
       - "{{ ingressRoutes }}"
      loop_control:
        loop_var: hostsDNS

    - name: Ask user for password to add hosts
      pause:
        prompt: "Enter SUDO password"
        echo: no
      register: sudo
      when: hostsChecks.changed == true and ansible_become_pass is undefined and mode == 'new'
      no_log: yes

    - name: Set ansible become password
      set_fact:
        ansible_become_pass: "{{ sudo.user_input }}"
      no_log: yes
      when: hostsChecks.changed == true and mode == 'new'

    - name: Add host entries for webpages
      lineinfile:
        path: /etc/hosts
        line: 127.0.0.1 {{ item }}
        state: present
      with_items:
       - "{{ ingressRoutes }}"
      when: mode == 'new' and hostsChecks.changed == true
      become: yes
    
    - name: Load cluster tools and set demostage status
      block:
        - name: Pull down metrics server from github
          git:
            clone: yes
            repo: https://github.com/kubernetes-incubator/metrics-server.git
            dest: "{{ playbook_dir }}/files/manifests/tools/metrics"

        - name: Find all manifests in metrics directory
          find:
            paths: "{{ playbook_dir }}/files/manifests/tools/metrics/deploy/1.8+/"
            file_type: file
            use_regex: yes
            patterns:
              - '.*.yml$'
              - '.*.yaml$'
          register: metrics

        - name: Get list paths for all metrics manifests
          set_fact:
            metricsManifests: "{{ metrics.files | map(attribute='path') | list }}"
        
        - name: Load metrics server
          k8s:
            state: present
            src: "{{ manifestLoad }}"
            wait: yes
            wait_condition:
              reason: completed
              status: "True"
            wait_timeout: 360
          loop: "{{ metricsManifests }}"
          loop_control:
            loop_var: manifestLoad

        - name: Find all manifests in manifests/tools directory
          find:
            paths: "{{ playbook_dir }}/files/manifests/tools/"
            file_type: file
            use_regex: yes
            patterns:
              - '.*.yml$'
              - '.*.yaml$'
          register: toolManifests

        - name: Load Cluster tools manifests
          k8s:
            state: present
            src: "{{ toolsLoad }}"
            wait: yes
            wait_condition:
              reason: completed
              status: "True"
            wait_timeout: 360
          register: demoStage
          loop: "{{ toolManifests.files | map(attribute='path') | list }}"
          loop_control:
            loop_var: toolsLoad

        - name: Set demo status
          set_fact:
            demoStage: "toolsLoaded"
      when: mode == 'new'

    - name: enable ingress and load tool ingresses
      block:
        - name: Find all manifests in manifests/ingress directory
          find:
            paths: "{{ playbook_dir }}/files/manifests/ingress/"
            file_type: file
            use_regex: yes
            patterns:
              - '.*.yml$'
              - '.*.yaml$'
          register: ingressManifests

        - name: Load Cluster tools ingress manifests
          k8s:
            state: present
            src: "{{ ingressLoad }}"
            wait: yes
            wait_condition:
              reason: completed
              status: "True"
            wait_timeout: 360
          loop: "{{ ingressManifests.files | map(attribute='path') | list }}"
          loop_control:
            loop_var: ingressLoad
      when: ingressEnable == "yes" and mode == "new"

    - name: Configure DAP source and access. Set demo status
      block:
        - name: Configure DAP
          include_tasks: "{{ dapStage }}.yml"
          loop:
            - source
            - access
          loop_control:
            loop_var: dapStage
            
        - name: Set demo stage status
          set_fact:
            demoStage: "dapConfigured"
      when: demoStage == "toolsLoaded" and mode == "new"
   
    - name: Configure demo tools and set status
      block:
        - name: Configure demo tools
          include_tasks: "{{ tasks }}.yml"
          loop:
            - apps
          loop_control:
            loop_var: tasks

        - name: Set demo stage status
          set_fact:
            demoStage: "demoToolsConfigured"
      when: demoStage == "dapConfigured" and mode == "new"
    
    - name: Configure DAP Mutating Webhook
      block:
        - name: Download injector files
          git:
            clone: yes
            repo: https://github.com/cyberark/sidecar-injector.git
            dest: "{{ playbook_dir }}/files/manifests/sidecarInjector"

        - name: Create injectors namespace
          k8s:
            name: injectors
            api_version: v1
            kind: Namespace
            state: present
            wait: yes
            wait_condition:
              reason: completed
              status: "True"
            wait_timeout: 360
        
        - name: Create a signed cert/key pair and store it in a Kubernetes secret that will be consumed by sidecar injector deployment
          shell: |
            ./webhook-create-signed-cert.sh --service cyberark-sidecar-injector --secret cyberark-sidecar-injector --namespace injectors
          args:
            chdir: "{{ playbook_dir }}/files/manifests/sidecarInjector/deployment"

        - name: Patch the MutatingWebhookConfiguration by setting caBundle with correct value from Kubernetes cluster
          shell: |
            cat mutatingwebhook.yaml | ./webhook-patch-ca-bundle.sh --namespace-selector-label cyberark-sidecar-injector --service cyberark-sidecar-injector --namespace injectors > mutatingwebhook-ca-bundle.yaml

        - name: Remove Mutating webhooks file
          file:
            state: absent
            path: "{{ playbook_dir }}/files/manifests/sidecarInjector/deployment/mutatingwebhook.yaml"

        - name: Find all manifests in manifests/sidecarInjector directory
          find:
            paths: "{{ playbook_dir }}/files/manifests/sidecarInjector/deployment"
            file_type: file
            use_regex: yes
            patterns:
              - '.*.yml$'
              - '.*.yaml$'
          register: sidecarManifests

        - name: Load Cluster tools manifests
          k8s:
            state: present
            src: "{{ sidecarInjectorLoad }}"
            namespace: injectors
            wait: yes
            wait_condition:
              reason: completed
              status: "True"
            wait_timeout: 360
          loop: "{{ sidecarManifests.files | map(attribute='path') | list }}"
          loop_control:
            loop_var: sidecarInjectorLoad

        - name: Set demo stage status
          set_fact:
            demoStage: "mutatingWebHookLoaded"
      when: demoStage == "demoToolsConfigured" and mode == "new"

    - name: Clean environment
      block:
        - name: Ask user for password for removal of hosts
          pause:
            prompt: "Enter SUDO password"
            echo: no
          register: sudo
          when: hostsChecks.changed != true
          no_log: yes

        - name: Set ansible become password for removal of hosts
          set_fact:
            ansible_become_pass: "{{ sudo.user_input }}"
          no_log: yes
          when: hostsChecks.changed != true

        - name: Remove host entries for webpages
          lineinfile:
            path: /etc/hosts
            line: 127.0.0.1 {{ item }}
            state: absent
          with_items:
            - "{{ ingressRoutes }}"
          become: yes
          when: hostsChecks.changed != true

        - name: Create injectors namespace
          k8s:
            name: injectors
            api_version: v1
            kind: Namespace
            state: absent
            wait: yes
            wait_condition:
              reason: completed
              status: "True"
            wait_timeout: 360
        
        - name: Find all manifests in manifests/sidecarInjector directory
          find:
            paths: "{{ playbook_dir }}/files/manifests/sidecarInjector/deployment"
            file_type: file
            use_regex: yes
            patterns:
              - '.*.yml$'
              - '.*.yaml$'
          register: sidecarManifests

        - name: Remove Injector manifests
          k8s:
            state: absent
            src: "{{ sidecarInjectorLoad }}"
            namespace: injectors
            wait: yes
            wait_condition:
              reason: completed
              status: "True"
            wait_timeout: 360
          loop: "{{ sidecarManifests.files | map(attribute='path') | list }}"
          loop_control:
            loop_var: sidecarInjectorLoad

        - name: Remove Injector Namespace
          k8s:
            state: absent
            namespace: injectors
            wait: yes
            wait_condition:
              reason: completed
              status: "True"
            wait_timeout: 360

        - name: remove sidecar download
          file:
            state: absent
            path: "{{ playbook_dir }}/files/manifests/sidecarInjector/"

        - name: Find all manifests in metrics directory
          find:
            paths: "{{ playbook_dir }}/files/manifests/tools/metrics/deploy/1.8+/"
            file_type: file
          register: metrics

        - name: remove metrics server
          k8s:
            state: absent
            src: "{{ item }}"
            wait: yes
            wait_condition:
              reason: completed
              status: "True"
          loop: "{{ metrics.files | map(attribute='path') | list }}"

        - name: Remove dap and demoapps namespacenamespace
          k8s:
            name: "{{ item }}"
            api_version: v1
            kind: Namespace
            state: absent
            wait: yes
            wait_condition:
              reason: completed
              status: "True"
            wait_timeout: 360
          with_items:
            - dap
            - demoapps

        - name: Find all manifests in ingress directory
          find:
            paths: "{{ playbook_dir }}/files/manifests/ingress/"
            file_type: file
          register: ingress

        - name: Remove tool ingress
          k8s:
            state: absent
            src: "{{ item }}"
            wait: yes
            wait_condition:
              reason: completed
              status: "True"
            wait_timeout: 360
          loop: "{{ ingress.files | map(attribute='path') | list }}"

        - name: Find all manifests in tools directory
          find:
            paths: "{{ playbook_dir }}/files/manifests/tools/"
            file_type: file
          register: tools

        - name: Remove Cluster tools
          k8s:
            state: absent
            src: "{{ item }}"
            wait: yes
            wait_condition:
              reason: completed
              status: "True"
            wait_timeout: 360
          loop: "{{ tools.files | map(attribute='path') | list }}"

        - name: remove metrics download
          file:
            state: absent
            path: "{{ playbook_dir }}/files/manifests/tools/metrics/"
      when: mode == "delete"

  vars:
    adminPass: 'Cyberark1'
    account: 'cyberark'
    dapAdmin: 'admin'
    dapAdminPass: "{{adminPass}}"
    dapAccount: "{{ account }}"
    dapSourceService: 'source.dap.svc.cluster.local'
    dapAccessService: 'access.dap.svc.cluster.local'
    dapFollowerReplicaCount: 1
    dapMasterContainerName: 'node'
    dapIngressRoute: "dap.{{clusterFQDN}}"
    jenkinsIngressRoute: "jenkins.{{clusterFQDN}}"
    dashboardIngressRoute: "dashboard.{{clusterFQDN}}"
    weaveIngressRoute: "weave.{{clusterFQDN}}"
    gogsIngressRoute: "gogs.{{clusterFQDN}}"
    demoMachineAddress: "{{ ansible_default_ipv4.address }}"
    ingressRoutes:
      - "{{dapIngressRoute}}"
      - "{{jenkinsIngressRoute}}"
      - "{{dashboardIngressRoute}}"
      - "{{weaveIngressRoute}}"
      - "{{gogsIngressRoute}}"
    gogsAdmin: 'eva'
    gogsAdminPass: "{{adminPass}}"
    gogsOrg: "{{ account }}"
    gogsApiAccessPass: "{{ gogsAdminPass }}"